"""
This page contains documentation for the module containing
functions for preprocessing 10X Genomics Immune Profiling data.

Example
-------

.. code-block:: Python

    from tcrdist import preprocess_10X
    from tcrdist.repertoire import TCRrep

    # filtered_contig_annotations_csvfile
    fca = 'vdj_v1_hs_pbmc_t_filtered_contig_annotations.csv'
    ca =  'vdj_v1_hs_pbmc_t_consensus_annotations.csv'
    clones_df = preprocess_10X.get_10X_clones(organism = 'human',
                                       filtered_contig_annotations_csvfile = fca,
                                       consensus_annotations_csvfile = ca)
    clones_df.head()

    tr = TCRrep(cell_df = clones_df, organism = "human", chains = ["alpha","beta"])
    tr.infer_cdrs_from_v_gene(chain = 'alpha', imgt_aligned=True)
    tr.infer_cdrs_from_v_gene(chain = 'beta', imgt_aligned=True)
    tr.index_cols = ['clone_id', 'subject',
                   'v_a_gene',  'j_a_gene', 'v_b_gene', 'j_b_gene',
                   'cdr3_a_aa', 'cdr3_b_aa',
                   'cdr1_a_aa', 'cdr2_a_aa', 'pmhc_a_aa',
                   'cdr1_b_aa', 'cdr2_b_aa', 'pmhc_b_aa',
                   'cdr3_b_nucseq', 'cdr3_a_nucseq']


"""

from collections import Counter
import os
import pandas as pd
from .all_genes import all_genes

def get_10X_clones(organism,
                   filtered_contig_annotations_csvfile,
                   consensus_annotations_csvfile,
                   include_gammadelta = False,
                   allow_unknown_genes = False):

    """
    Produces a clones DataFrame from two key 10X Cell Ranger files.

    1. The Filtered contig annotations (CSV) file.
    2. The Clonotype consensus annotations (CSV) file.

    Parameters
    ----------
    organism : str
        "mouse" or "human"
    filtered_contig_annotations_csvfile : str
        filename (e.g., vdj_v1_hs_pbmc_t_filtered_contig_annotations.csv)
    consensus_annotations_csvfile : str
        filename (e.g., vdj_v1_hs_pbmc_t_consensus_annotations.csv)
    include_gammadelta : bool
        Default is False
    allow_unknown_genes : bool
        Default is False

    Returns
    -------
    df : DataFrame
        DataFrame with the following columns : ['clone_id', 'subject', 'count', 'v_a_gene', 'j_a_gene', 'v_b_gene',
        'j_b_gene', 'cdr3_a_aa', 'cdr3_a_nucseq', 'cdr3_b_aa', 'cdr3_b_nucseq', 'alpha_umi', 'beta_umi', 'num_alphas', 'num_betas']

    Example
    -------
    >>> fca = 'vdj_v1_hs_pbmc_t_filtered_contig_annotations.csv'
    >>> ca = 'vdj_v1_hs_pbmc_t_consensus_annotations.csv'
    >>> clones_df = process_10X.get_10X_clones(organism = 'human',
                                       filtered_contig_annotations_csvfile = fca,
                                       consensus_annotations_csvfile = ca)

    Notes
    -----

    Get a clones DataFrame from two key 10X cell ranger files.

    1. The Filtered contig annotations (CSV) file.
    2. The Clonotype consensus annotations (CSV) file.

    The example uses 10X Genomics immune profiling data available on their website.
    `Dataset <https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_pan_t>`_
    generated by Cell Ranger 2.2.0.

    .. Tip::

      Multiple productive alpha or beta chains associate with a single
      10X unique cell identifier are possible. tcrdist2 picks the productive variant of
      the chain associated with the highest number of unique molecular identifies.


    .. Tip::

      It is possible that the 10X file contain short 5 AA cdr3 call. These
      are incompatible with tcrdist2 and are filtered out of the result.

    """

    clonotype2tcrs, clonotype2barcodes = _read_tcr_data(organism,
                                                       filtered_contig_annotations_csvfile,
                                                       consensus_annotations_csvfile,
                                                       include_gammadelta,
                                                       allow_unknown_genes)

    df = _make_clones_df(organism, clonotype2tcrs, clonotype2barcodes )
    return df

def _parse_csv_file( csvfile ):
    """
    Gets header and all lines as a list of dictionaries from a csv file.

    Parameters
    ----------
    csvfile : str
        string of csv path and filename.

    Returns
    -------
    tuple

    header : list
        list of string columns names
    all_info : list
        list of dictionaries

    Example
    -------
    If this function were run on the following csvfile

    .. code-block::

        column1, column2
        1,2
        3,4

    it would return a tuple:

    .. code-block::

        ( ['column1', 'column2'] ,

        [{'column1':1,'column2':2},
        {'column1':3,'column2':4}]    )

    """
    df = pd.read_csv(csvfile)
    header = df.columns.to_list()
    all_info = df.to_dict('rows')
    return header, all_info


def _read_tcr_data( organism,
                  contig_annotations_csvfile,
                  consensus_annotations_csvfile,
                  include_gammadelta,
                  allow_unknown_genes):
    """
    Parses TCR data, only taking 'productive' TCRs as defined by the Cell Ranger
    files.

    organism : str
        "mouse" or "human"
    filtered_contig_annotations_csvfile : str
        filename (e.g., vdj_v1_hs_pbmc_t_filtered_contig_annotations.csv)
    consensus_annotations_csvfile : str
        filename (e.g., vdj_v1_hs_pbmc_t_consensus_annotations.csv)
    include_gammadelta : bool
        Default is False
    allow_unknown_genes : bool
        Default is False

    Returns
    -------
    clonotype2tcrs : dict

    clonotype2barcodes : dict

    Notes
    -----
    10X Genomics Files

    For analysis of 10X Genomics data, CD8+ cytotoxic T cells or CD4+ T cell are
    often isolated. Output from the 10X Genomics Cell Ranger pipeline, produces
    two files nessary for importing the results into tcrdist2:

    1. Filtered contig annotations (CSV) (fca.csv)
    2. Clonotype consensus annotations (CSV) (cca.csv)

    Required Fields in **contig_annotations_csvfile**

    +------------------+--------------------------------------------------+
    | FIELD            | EXAMPLE VALUE                                    |
    +------------------+--------------------------------------------------+
    | barcode          | AAAGATGGTCTTCTCG-1                               |
    +------------------+--------------------------------------------------+
    | is_cell          | TRUE                                             |
    +------------------+--------------------------------------------------+
    | contig_id        | AAAGATGGTCTTCTCG-1_contig_1                      |
    +------------------+--------------------------------------------------+
    | high_confidence  | TRUE                                             |
    +------------------+--------------------------------------------------+
    | length           | 695                                              |
    +------------------+--------------------------------------------------+
    | chain            | TRB                                              |
    +------------------+--------------------------------------------------+
    | v_gene           | TRBV5-1*01                                       |
    +------------------+--------------------------------------------------+
    | d_gene           | TRBD2*02                                         |
    +------------------+--------------------------------------------------+
    | j_gene           | TRBJ2-3*01                                       |
    +------------------+--------------------------------------------------+
    | c_gene           | TRBC2*01                                         |
    +------------------+--------------------------------------------------+
    | full_length      | TRUE                                             |
    +------------------+--------------------------------------------------+
    | productive       | TRUE                                             |
    +------------------+--------------------------------------------------+
    | cdr3             | CASSPLAGYAADTQYF                                 |
    +------------------+--------------------------------------------------+
    | cdr3_nt          | TGCGCCAGCAGCCCCCTAGCGGGATACGCAGCAGATACGCAGTATTTT |
    +------------------+--------------------------------------------------+
    | reads            | 9427                                             |
    +------------------+--------------------------------------------------+
    | umis             | 9                                                |
    +------------------+--------------------------------------------------+
    | raw_clonotype_id | clonotype14                                      |
    +------------------+--------------------------------------------------+
    | raw_consensus_id | clonotype14_consensus_1                          |
    +------------------+--------------------------------------------------+


    Required Fields in **consensus_annotations_csvfile**

    +--------------+-----------------------------------------------+
    | FIELD        | EXAMPLE VALUE                                 |
    +--------------+-----------------------------------------------+
    | clonotype_id | clonotype100                                  |
    +--------------+-----------------------------------------------+
    | consensus_id | clonotype100_consensus_1                      |
    +--------------+-----------------------------------------------+
    | length       | 550                                           |
    +--------------+-----------------------------------------------+
    | chain        | TRB                                           |
    +--------------+-----------------------------------------------+
    | v_gene       | TRBV24-1*01                                   |
    +--------------+-----------------------------------------------+
    | d_gene       | TRBD1*01                                      |
    +--------------+-----------------------------------------------+
    | j_gene       | TRBJ2-7*01                                    |
    +--------------+-----------------------------------------------+
    | c_gene       | TRBC2*01                                      |
    +--------------+-----------------------------------------------+
    | full_length  | TRUE                                          |
    +--------------+-----------------------------------------------+
    | productive   | TRUE                                          |
    +--------------+-----------------------------------------------+
    | cdr3         | CATSDPGQGGYEQYF                               |
    +--------------+-----------------------------------------------+
    | cdr3_nt      | TGTGCCACCAGTGACCCCGGACAGGGAGGATACGAGCAGTACTTC |
    +--------------+-----------------------------------------------+
    | reads        | 8957                                          |
    +--------------+-----------------------------------------------+
    | umis         | 9                                             |
    +--------------+-----------------------------------------------+

    """
    # Perform basic check that inputs conform with expectation.
    assert organism in ["mouse", "human"]

    assert isinstance(contig_annotations_csvfile,str)
    assert os.path.isfile(contig_annotations_csvfile)

    assert isinstance(consensus_annotations_csvfile,str)
    assert os.path.isfile(consensus_annotations_csvfile)

    assert isinstance(include_gammadelta, bool)
    assert isinstance(allow_unknown_genes, bool)

    expected_gene_names = all_genes[organism].keys()

    gene_suffix = '*01' # may not be used

    # read the contig annotations-- map from clonotypes to barcodes
    clonotype2barcodes = {}
    _, lines = _parse_csv_file(contig_annotations_csvfile)

    for l in lines:
        bc = l['barcode']
        clonotype = l['raw_clonotype_id']
        #if clonotype == 'None': # - corresponds w/ old _parse_csv_file()
        if clonotype is None:
            #if l['productive'] not in [ None, 'None','False' ]: # - corresponds w/ old _parse_csv_file()
            if l['productive'] not in [ None, False]:
                assert(l['productive'] is True)
                #assert (l['productive'] == 'True' or l['productive'] is True) # - corresponds w/ old _parse_csv_file()
            continue
        if clonotype not in clonotype2barcodes:
            clonotype2barcodes[clonotype] = []
        if bc in clonotype2barcodes[clonotype]:
            pass
        else:
            clonotype2barcodes[clonotype].append( bc )


    ## now read details on the individual chains for each clonotype
    # ==> tcr/human/JCC176_TX2_TCR_consensus_annotations.csv <==
    _, lines = _parse_csv_file( consensus_annotations_csvfile )

    ## first get clonotypes with one alpha and one beta
    clonotype2tcrs = {}

    for l in lines:
        #if (l['productive'] == 'True'): # - corresponds w/ old _parse_csv_file()
        if l['productive'] is True:
            id = l['clonotype_id']
            if id not in clonotype2tcrs:
                # dictionaries mapping from tcr to umi-count
                clonotype2tcrs[id] = { 'A':Counter(), 'B':Counter() } #, 'G':[], 'D': [] }
                assert id in clonotype2barcodes

            ch = l['chain']
            if not ch.startswith('TR'):
                print( 'skipline:', consensus_annotations_csvfile, ch, l['v_gene'], l['j_gene'])
                continue
            ab = ch[2]
            if ab not in 'AB':
                print('skipline:', consensus_annotations_csvfile, ch, l['v_gene'], l['j_gene'])
                continue
            vg = l['v_gene']
            if '*' not in vg:
                vg += gene_suffix
            if 'DV' in vg and vg not in expected_gene_names:
                #print 'DV?',vg
                vg = vg[:vg.index('DV')]+'/'+vg[vg.index('DV'):]
            jg = l['j_gene']
            if '*' not in jg:
                jg += gene_suffix
            # if vg in tcr_gene_remap[organism]:
            #     vg = tcr_gene_remap[organism][vg]
            # if jg in tcr_gene_remap[organism]:
            #     jg = tcr_gene_remap[organism][jg]

            if vg not in expected_gene_names:
                print('unrecognized V gene:', organism, vg)
                if not allow_unknown_genes:
                    continue
            if vg not in expected_gene_names or jg not in expected_gene_names:
                print('unrecognized J gene:', organism, jg)
                if not allow_unknown_genes:
                    continue

            tcr_chain = ( vg, jg, l['cdr3'], l['cdr3_nt'].lower() )

            if tcr_chain not in clonotype2tcrs[id][ab]:
                clonotype2tcrs[id][ab][ tcr_chain ] = int( l['umis'] )
            else:
                print('repeat?',id,ab,tcr_chain)
        else:
            if l['productive'] not in [None, 'None','False' ]:
                print('unproductive?',l['productive'])

    return clonotype2tcrs, clonotype2barcodes


def _make_clones_df(organism, clonotype2tcrs, clonotype2barcodes):
    """
    Make a clones DataFrame with information parsed from the 10X csv files

    Parameters
    ----------
    organism : str

    clonotype2tcrs : dict

    clonotype2barcodes : dict

    Returns
    -------
    DataFrame

    """
    rows = []
    outfields = 'clone_id subject clone_size va_gene ja_gene vb_gene jb_gene cdr3a cdr3a_nucseq cdr3b cdr3b_nucseq'\
        .split()
    extra_fields = 'alpha_umi beta_umi num_alphas num_betas'.split()
    outfields += extra_fields


    for clonotype, tcrs in clonotype2tcrs.items():
        if len(tcrs['A']) >= 1 and len(tcrs['B']) >= 1:
            atcrs = tcrs['A'].most_common()
            btcrs = tcrs['B'].most_common()
            if len(atcrs)>1:
                pass
                #print('multiple alphas, picking top umi:',' '.join( str(x) for _,x in atcrs ))
            if len(btcrs)>1:
                pass
                #print('multiple  betas, picking top umi:',' '.join( str(x) for _,x in btcrs ))
            atcr, atcr_umi = atcrs[0]
            btcr, btcr_umi = btcrs[0]
            outl = {}
            outl['clone_id'] = clonotype
            outl['subject'] = 'UNK_S'
            outl['clone_size'] = len(clonotype2barcodes[clonotype])
            outl['va_gene']      = atcr[0]
            outl['ja_gene']      = atcr[1]
            outl['cdr3a']        = atcr[2]
            outl['cdr3a_nucseq'] = atcr[3]
            outl['alpha_umi']    = str(atcr_umi)
            outl['num_alphas']   = len(atcrs)
            outl['vb_gene']      = btcr[0]
            outl['jb_gene']      = btcr[1]
            outl['cdr3b']        = btcr[2]
            outl['cdr3b_nucseq'] = btcr[3]
            outl['beta_umi']     = str(btcr_umi)
            outl['num_betas']    = len(btcrs)
            rows.append([outl[x] for x in outfields])

    df = pd.DataFrame(rows, columns = outfields)
    # CDR3 shorter than 6 are not resolvable by tcrdist2 so are exclude

    # Some Polishing Steps
    # rename to tcrdist2 default names
    df = df.rename(columns = {'clone_size'   : 'count',
                                'va_gene'      :'v_a_gene',
                                'vb_gene'      :'v_b_gene',
                                'ja_gene'      : 'j_a_gene',
                                'jb_gene'      : 'j_b_gene',
                                'cdr3a'        : 'cdr3_a_aa',
                                'cdr3a_nucseq' : 'cdr3_a_nucseq',
                                'cdr3b'        : 'cdr3_b_aa',
                                'cdr3b_nucseq' : 'cdr3_b_nucseq'})
    # remove any TCR with a CDR shorter than 5
    ind1 = [len(x) > 5 for x in df.cdr3_b_aa.to_list()]
    ind2 = [len(x) > 5 for x in df.cdr3_a_aa.to_list()]
    ind = [i and j for i,j in zip(ind1,ind2)]
    df = df[ind].copy()
    assert sorted([len(x) for x in df.cdr3_b_aa.to_list()])[0] > 5
    assert sorted([len(x) for x in df.cdr3_a_aa.to_list()])[0] > 5
    return(df)



# The code commented out is left over from when I tried to reimplement
# Phil's version with parsing of commandline arguments

# def make_clones_file( organism, outfile, clonotype2tcrs, clonotype2barcodes ):
#     ''' Make a clones file with information parsed from the 10X csv files
#
#     organism is one of ['mouse','human']
#
#     outfile is the name of the clones file to be created
#
#     '''
#
#     tmpfile = outfile+'.tmp' # a temporary intermediate file
#     bc_mapfile = outfile+'.barcode_mapping.tsv'
#     outmap = open(bc_mapfile,'w')
#     outmap.write('clone_id\tbarcodes\n')
#
#     out = open(tmpfile,'w')
#     outfields = 'clone_id subject clone_size va_gene ja_gene vb_gene jb_gene cdr3a cdr3a_nucseq cdr3b cdr3b_nucseq'\
#         .split()
#     extra_fields = 'alpha_umi beta_umi num_alphas num_betas'.split()
#     outfields += extra_fields
#
#     out = open(tmpfile,'w')
#     out.write('\t'.join( outfields )+'\n' )
#
#     for clonotype, tcrs in clonotype2tcrs.items():
#         if len(tcrs['A']) >= 1 and len(tcrs['B']) >= 1:
#             atcrs = tcrs['A'].most_common()
#             btcrs = tcrs['B'].most_common()
#             if len(atcrs)>1:
#                 print('multiple alphas, picking top umi:',' '.join( str(x) for _,x in atcrs ))
#             if len(btcrs)>1:
#                 print('multiple  betas, picking top umi:',' '.join( str(x) for _,x in btcrs ))
#             atcr, atcr_umi = atcrs[0]
#             btcr, btcr_umi = btcrs[0]
#             outl = {}
#             outl['clone_id'] = clonotype
#             outl['subject'] = 'UNK_S'
#             outl['clone_size'] = len(clonotype2barcodes[clonotype])
#             outl['va_gene']      = atcr[0]
#             outl['ja_gene']      = atcr[1]
#             outl['cdr3a']        = atcr[2]
#             outl['cdr3a_nucseq'] = atcr[3]
#             outl['alpha_umi']    = str(atcr_umi)
#             outl['num_alphas']   = str(len(atcrs))
#             outl['vb_gene']      = btcr[0]
#             outl['jb_gene']      = btcr[1]
#             outl['cdr3b']        = btcr[2]
#             outl['cdr3b_nucseq'] = btcr[3]
#             outl['beta_umi']     = str(btcr_umi)
#             outl['num_betas']    = str(len(btcrs))
#             out.write("\t".join(map(str, [outl[x] for x in outfields])) + "\n")
#             #out.write( make_tsv_line(outl,outfields)+'\n' )
#             outmap.write('{}\t{}\n'.format(clonotype,','.join(clonotype2barcodes[clonotype])))
#     out.close()
#     outmap.close()



    # cmd = 'python {}/file_converter.py --input_format clones --output_format clones --input_file {} --output_file {}  --organism {} --clobber --epitope UNK_E --check_genes --extra_fields {} '\
    #     .format( paths.path_to_scripts, tmpfile, outfile, organism, ' '.join(extra_fields) )
    # print(cmd)
    # system(cmd)

# if __name__ == "__main__":
#
#     # Native Python rather than blargs requirements
#     import argparse
#
#     my_parser = argparse.ArgumentParser(
#         description='Program for Converting 10X Genomics Files to tcrdist2:\n'\
#         'make_10x_clones_file.py -f vdj_v1_hs_pbmc_t_filtered_contig_annotations.csv -c vdj_v1_hs_pbmc_t_consensus_annotations.csv -o output_10X_clones_file.txt -r human',
#         epilog='Go Seahawks')
#
#     my_parser.add_argument('-f',
#                            '--filtered_contig_annotations_csvfile',
#                            action='store',
#                            required=True,
#                            help = "10X Genomics Input file path and filename (csvfile)")
#     my_parser.add_argument('-c',
#                            '--consensus_annotations_csvfile',
#                            action='store',
#                            required=True,
#                            help = "10X Genomics Input file path and filename (csvfile)")
#     my_parser.add_argument('-o',
#                            '--clones_file',
#                            action='store',
#                            required=True,
#                            help = "Output filename")
#     my_parser.add_argument('-r',
#                            '--organism',
#                            action='store',
#                            required=True,
#                            help = "'human' or 'mouse'")
#     my_parser.add_argument('-x',
#                            '--clobber',
#                            action='store',
#                            required=False,
#                            default = False,
#                            help = "Setting -x --clobber to True will overwrite existing clones file"
#                            )
#
#     args = my_parser.parse_args()
#
#
#     if os.path.isfile(args.clones_file) and not args.clobber:
#         print ('ERROR -- clones_file {} already exists; use --clobber to overwrite')
#         exit(1)
#
#     assert args.organism in ['human','mouse']
#
#     clonotype2tcrs, clonotype2barcodes = _read_tcr_data( args.organism, args.filtered_contig_annotations_csvfile,
#                                                         args.consensus_annotations_csvfile )
#
#     make_clones_file( args.organism, args.clones_file, clonotype2tcrs, clonotype2barcodes )
